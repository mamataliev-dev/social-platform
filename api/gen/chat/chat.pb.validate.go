// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat/chat.proto

package chatpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequestMultiError, or nil if none found.
func (m *CreateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserAId

	// no validation rules for UserBId

	if len(errors) > 0 {
		return CreateRoomRequestMultiError(errors)
	}

	return nil
}

// CreateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequestMultiError) AllErrors() []error { return m }

// CreateRoomRequestValidationError is the validation error returned by
// CreateRoomRequest.Validate if the designated constraints aren't met.
type CreateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequestValidationError) ErrorName() string {
	return "CreateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequestValidationError{}

// Validate checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomResponseMultiError, or nil if none found.
func (m *CreateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoomResponseMultiError(errors)
	}

	return nil
}

// CreateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomResponseMultiError) AllErrors() []error { return m }

// CreateRoomResponseValidationError is the validation error returned by
// CreateRoomResponse.Validate if the designated constraints aren't met.
type CreateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomResponseValidationError) ErrorName() string {
	return "CreateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomResponseValidationError{}

// Validate checks the field values on GetUserRoomsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRoomsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRoomsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRoomsRequestMultiError, or nil if none found.
func (m *GetUserRoomsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRoomsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserRoomsRequestMultiError(errors)
	}

	return nil
}

// GetUserRoomsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserRoomsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserRoomsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRoomsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRoomsRequestMultiError) AllErrors() []error { return m }

// GetUserRoomsRequestValidationError is the validation error returned by
// GetUserRoomsRequest.Validate if the designated constraints aren't met.
type GetUserRoomsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoomsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoomsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoomsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoomsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoomsRequestValidationError) ErrorName() string {
	return "GetUserRoomsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRoomsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoomsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoomsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoomsRequestValidationError{}

// Validate checks the field values on GetUserRoomsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRoomsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRoomsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRoomsResponseMultiError, or nil if none found.
func (m *GetUserRoomsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRoomsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRoomsResponseValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserRoomsResponseMultiError(errors)
	}

	return nil
}

// GetUserRoomsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserRoomsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserRoomsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRoomsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRoomsResponseMultiError) AllErrors() []error { return m }

// GetUserRoomsResponseValidationError is the validation error returned by
// GetUserRoomsResponse.Validate if the designated constraints aren't met.
type GetUserRoomsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoomsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoomsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoomsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoomsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoomsResponseValidationError) ErrorName() string {
	return "GetUserRoomsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRoomsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoomsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoomsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoomsResponseValidationError{}

// Validate checks the field values on Room with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Room) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Room with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoomMultiError, or nil if none found.
func (m *Room) ValidateAll() error {
	return m.validate(true)
}

func (m *Room) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserAId

	// no validation rules for UserBId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomMultiError(errors)
	}

	return nil
}

// RoomMultiError is an error wrapping multiple validation errors returned by
// Room.ValidateAll() if the designated constraints aren't met.
type RoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomMultiError) AllErrors() []error { return m }

// RoomValidationError is the validation error returned by Room.Validate if the
// designated constraints aren't met.
type RoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomValidationError) ErrorName() string { return "RoomValidationError" }

// Error satisfies the builtin error interface
func (e RoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomValidationError{}

// Validate checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageRequestMultiError, or nil if none found.
func (m *SendMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for SenderId

	// no validation rules for Content

	if len(errors) > 0 {
		return SendMessageRequestMultiError(errors)
	}

	return nil
}

// SendMessageRequestMultiError is an error wrapping multiple validation errors
// returned by SendMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type SendMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageRequestMultiError) AllErrors() []error { return m }

// SendMessageRequestValidationError is the validation error returned by
// SendMessageRequest.Validate if the designated constraints aren't met.
type SendMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageRequestValidationError) ErrorName() string {
	return "SendMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageRequestValidationError{}

// Validate checks the field values on SendMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageResponseMultiError, or nil if none found.
func (m *SendMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMessageResponseMultiError(errors)
	}

	return nil
}

// SendMessageResponseMultiError is an error wrapping multiple validation
// errors returned by SendMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type SendMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageResponseMultiError) AllErrors() []error { return m }

// SendMessageResponseValidationError is the validation error returned by
// SendMessageResponse.Validate if the designated constraints aren't met.
type SendMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageResponseValidationError) ErrorName() string {
	return "SendMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageResponseValidationError{}

// Validate checks the field values on GetMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessagesRequestMultiError, or nil if none found.
func (m *GetMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetMessagesRequestMultiError(errors)
	}

	return nil
}

// GetMessagesRequestMultiError is an error wrapping multiple validation errors
// returned by GetMessagesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessagesRequestMultiError) AllErrors() []error { return m }

// GetMessagesRequestValidationError is the validation error returned by
// GetMessagesRequest.Validate if the designated constraints aren't met.
type GetMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessagesRequestValidationError) ErrorName() string {
	return "GetMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessagesRequestValidationError{}

// Validate checks the field values on GetMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessagesResponseMultiError, or nil if none found.
func (m *GetMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMessagesResponseMultiError(errors)
	}

	return nil
}

// GetMessagesResponseMultiError is an error wrapping multiple validation
// errors returned by GetMessagesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessagesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessagesResponseMultiError) AllErrors() []error { return m }

// GetMessagesResponseValidationError is the validation error returned by
// GetMessagesResponse.Validate if the designated constraints aren't met.
type GetMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessagesResponseValidationError) ErrorName() string {
	return "GetMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessagesResponseValidationError{}

// Validate checks the field values on StreamMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamMessagesRequestMultiError, or nil if none found.
func (m *StreamMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return StreamMessagesRequestMultiError(errors)
	}

	return nil
}

// StreamMessagesRequestMultiError is an error wrapping multiple validation
// errors returned by StreamMessagesRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMessagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMessagesRequestMultiError) AllErrors() []error { return m }

// StreamMessagesRequestValidationError is the validation error returned by
// StreamMessagesRequest.Validate if the designated constraints aren't met.
type StreamMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMessagesRequestValidationError) ErrorName() string {
	return "StreamMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMessagesRequestValidationError{}

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageMultiError, or
// nil if none found.
func (m *ChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoomId

	// no validation rules for SenderId

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChatMessageMultiError(errors)
	}

	return nil
}

// ChatMessageMultiError is an error wrapping multiple validation errors
// returned by ChatMessage.ValidateAll() if the designated constraints aren't met.
type ChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageMultiError) AllErrors() []error { return m }

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}
